-- https://www.codewars.com/kata/5ffcbacca79621000dbe7238
-- Draw the borders I - Simple ascii border

module DrawBorders (drawBorders) where

import Data.Char
import Data.List

drawBorders :: [(Int, Int)] -> [Char]
drawBorders shape = let
    bs = shapeToBorders shape
    borders = chop [(head bs)] bs
    bxs = map fst borders
    bys = map snd borders
    minx = minimum bxs
    maxx = maximum bxs
    miny = minimum bys
    maxy = maximum bys
    horizontal x y = notElem (x-1,y) shape && notElem (x+1,y) shape && (elem (x,y-1) shape || elem (x,y+1) shape)
    vertical   x y = (elem (x-1,y) shape || elem (x+1,y) shape) && notElem (x,y-1) shape && notElem (x,y+1) shape
    isCorner   x y = (elem (x-1,y-1) shape && notElem (x-1,y) shape && notElem (x,y-1) shape) ||
                     (elem (x-1,y+1) shape && notElem (x-1,y) shape && notElem (x,y+1) shape) ||
                     (elem (x+1,y-1) shape && notElem (x+1,y) shape && notElem (x,y-1) shape) ||
                     (elem (x+1,y+1) shape && notElem (x+1,y) shape && notElem (x,y+1) shape)
    draw = concat [ (if elem (x,y) borders then 
                    if isCorner x y then "+"
                    else if horizontal x y then "-"
                    else if vertical x y then "|" else "+"    
                    else " ") ++
                    (if x == maxx then "\n" else "") 
                    | y <- [maxy,maxy-1..miny], x <- [minx..maxx] ]
    in init $ unlines $ map rtrim $ lines draw

rtrim = reverse . dropWhile isSpace . reverse

shapeToBorders :: [(Int,Int)] -> [(Int,Int)]
shapeToBorders ss = sort $ (nub $ concat $ map surround ss) \\ ss

surround :: (Int,Int) -> [(Int,Int)]
surround (x,y) = 
    [(x-1,y-1),(x,y-1),(x+1,y-1),
     (x-1,y  ),        (x+1,y  ),
     (x-1,y+1),(x,y+1),(x+1,y+1)]

chop :: [(Int,Int)] -> [(Int,Int)] -> [(Int,Int)]
chop [] _ = []
chop cand [] = cand
chop cand borders = let
        newCand = nub $ concat [ filter (`elem` borders) [(x-1,y),(x+1,y),(x,y-1),(x,y+1)] | (x, y) <- cand ] 
    in cand ++ chop newCand (borders \\ newCand)
{-
[(-1,15),(-1,17),(-1,18),(-1,19),(-1,27),(0,14),(0,15),(0,16),(0,17),(0,18),(0,27),(0,28),(1,15),(1,16),(1,18),(1,19),(1,20),(1,21),(1,22),(1,28),(1,29),(2,15),(2,16),(2,17),(2,18),(2,19),(2,20),(2,27),(2,28),(2,29),(3,16),(3,17),(3,18),(3,19),(3,27),(3,28),(3,29),(3,30),(4,17),(4,18),(4,19),(4,20),(4,24),(4,27),(4,28),(4,29),(4,30),(5,15),(5,16),(5,18),(5,19),(5,25),(5,26),(5,27),(5,28),(5,29),(6,17),(6,18),(6,26),(6,27),(6,28),(7,18),(7,19),(7,27),(7,28),(8,18),(8,26),(8,27),(8,28),(8,29),(8,30),(9,18),(9,19),(9,27),(9,28),(9,29),(10,15),(10,17),(10,18),(10,19),(10,27),(10,28),(10,29),(10,30),(11,16),(11,17),(11,18),(11,19),(11,20),(11,27),(11,28),(11,30),(12,16),(12,17),(12,18),(12,19),(12,20),(12,21),(12,26),(12,27),(12,28),(12,29),(12,30),(13,12),(13,15),(13,16),(13,17),(13,18),(13,19),(13,20),(13,27),(13,28),(13,29),(13,30),(14,10),(14,11),(14,12),(14,15),(14,16),(14,17),(14,18),(14,19),(14,28),(14,29),(15,10),(15,11),(15,12),(15,13),(15,14),(15,16),(15,17),(15,18),(15,19),(15,22),(15,26),(15,28),(15,29),(15,31),(16,0),(16,9),(16,10),(16,11),(16,12),(16,13),(16,14),(16,15),(16,16),(16,17),(16,18),(16,20),(16,21),(16,24),(16,25),(16,26),(16,27),(16,28),(16,29),(16,30),(17,-1),(17,0),(17,1),(17,2),(17,3),(17,4),(17,5),(17,6),(17,7),(17,8),(17,9),(17,10),(17,11),(17,12),(17,13),(17,14),(17,15),(17,16),(17,17),(17,18),(17,19),(17,20),(17,21),(17,22),(17,23),(17,24),(17,25),(17,26),(17,27),(17,28),(17,29),(17,30),(18,1),(18,2),(18,3),(18,4),(18,5),(18,6),(18,7),(18,8),(18,9),(18,10),(18,12),(18,13),(18,15),(18,16),(18,17),(18,18),(18,19),(18,20),(18,21),(18,25),(18,26),(18,27),(18,28),(18,29),(18,30),(18,31),(19,5),(19,6),(19,7),(19,9),(19,10),(19,11),(19,12),(19,17),(19,18),(19,19),(19,20),(19,23),(19,25),(19,27),(19,28),(19,29),(19,30),(19,31),(20,2),(20,3),(20,4),(20,5),(20,6),(20,7),(20,8),(20,9),(20,10),(20,11),(20,12),(20,13),(20,14),(20,15),(20,16),(20,17),(20,18),(20,19),(20,20),(20,21),(20,22),(20,23),(20,24),(20,25),(20,26),(20,27),(20,28),(20,29),(21,0),(21,1),(21,2),(21,3),(21,4),(21,5),(21,6),(21,7),(21,8),(21,9),(21,10),(21,11),(21,12),(21,13),(21,14),(21,15),(21,16),(21,17),(21,18),(21,19),(21,20),(21,21),(21,22),(21,23),(21,24),(21,25),(21,26),(21,27),(21,28),(21,29),(21,30),(22,-1),(22,1),(22,2),(22,3),(22,4),(22,5),(22,6),(22,7),(22,8),(22,9),(22,10),(22,14),(22,15),(22,16),(22,17),(22,18),(22,19),(22,21),(22,22),(22,23),(22,24),(22,26),(22,27),(22,28),(22,29),(22,30),(23,1),(23,3),(23,4),(23,5),(23,7),(23,16),(23,18),(23,19),(23,24),(23,25),(23,26),(23,27),(23,28),(23,29),(24,18),(24,19),(24,20),(24,24),(24,27),(24,28),(24,29),(24,30),(25,17),(25,18),(25,19),(25,20),(25,27),(25,28),(25,29),(26,17),(26,18),(26,26),(26,27),(26,28),(26,29),(27,17),(27,18),(27,20),(27,27),(27,28),(28,17),(28,18),(28,19),(28,20),(28,28),(28,30),(28,31),(29,17),(29,18),(29,19),(29,20),(29,27),(29,28),(29,29),(30,17),(30,18),(30,19),(30,20),(30,27),(30,28),(31,17),(31,18),(31,20),(31,28),(32,17),(32,18),(32,19),(32,27),(32,28),(32,29),(33,16),(33,17),(33,18),(33,28),(33,29),(33,30),(34,16),(34,17),(34,18),(34,19),(34,28),(34,29),(34,30),(34,31),(34,32),(35,16),(35,17),(35,18),(35,19),(35,20),(35,27),(35,28),(35,29),(36,16),(36,17),(36,18),(36,19),(36,20),(36,21),(36,28),(36,29),(37,18),(37,20),(37,21)]

Expected "   +-+\n  ++ ++\n ++   ++\n++     ++\n|       |\n+-------+"
   +-+
  ++ ++
 ++   ++
++     ++
|       |
+-------+
 but got "   +-+   \n  ++ ++  \n ++   ++ \n++     ++\n|       |\n+-------+"
   +-+   
  ++ ++  
 ++   ++ 
++     ++
|       |
+-------+

以下は遅い
reachable _ _ [] = False
reachable start@(x,y) target borders = 
    if start == target then True
    else or [ if elem p borders then reachable p target (delete p borders) else False 
               | p <- [(x-1,y),(x+1,y),(x,y-1),(x,y+1)] ]

-}


